///////////////////
//// REFERENCE DATABASES
//////////////////////////

// all databases used by the different scripts should be located in this directory

params.base_db = "$launchDir/db/"

params.zdb_base_db = "${params.base_db}/base"
params.swissprot_db = "${params.base_db}/uniprot/swissprot/"
params.pfam_db = "${params.base_db}/pfam/"
params.cog_db = "${params.base_db}/cog/"
params.ko_db = "${params.base_db}/kegg/"
params.refseq_db = "${params.base_db}/refseq/"
params.vf_db = "${params.base_db}/vfdb/"

params.results_dir = "zdb/results"

////////////////
///// Analysis and parameters
//////////////////////////////

params.cog = false
params.ko = false
params.pfam = false
params.amr = false
params.vfdb = false
params.setup_base_db = false
params.gi = false

params.checkm_args = "domain Bacteria"

// allow (or not) missing data when identifying single copy core genes
params.core_missing = 0


// homology search vs RefSeq and SwissProt
params.blast_swissprot = false
params.diamond_refseq = false

// evalue for blast against VFDB
params.vf_evalue = "1e-10"
params.vf_seqid = "60"
params.vf_coverage = "60"

// Orthogroup prediction parameters
params.og_seq_aligner = "diamond" // blast or diamond
params.og_n_core = 64

//////
//// Internals
//////////////////////////////

params.setup_base_db_script = "$baseDir/utils/setup_base_db.py"
params.zdb.file = "$params.zdb_base_db/zdb_base"

params.zdb.db_name = "zdb_base"
params.zdb.db_type = "sqlite"
params.zdb.psswd = ""

// Necessary to be able to access the database directory
// in singularity

params.singularity_dir = "$launchDir/singularity"

singularity.enabled = "$params.singularity"=="true"?true:false
singularity.cacheDir = "$params.singularity_dir"
singularity.autoMounts = true

docker.enabled = "$params.docker" == "true"?true:false
conda.enabled = "$params.conda" == "true"?true:false
conda.useMamba = false

params.annotation_container = "registry.hub.docker.com/metagenlab/annotation-pipeline:1.5.0"

params.checkm_container = "quay.io/biocontainers/checkm-genome:1.2.1--pyhdfd78af_0"
params.blast_container = "quay.io/biocontainers/blast:2.9.0--pl526h3066fca_4"
params.pfam_scan_container = "quay.io/biocontainers/pfam_scan:1.6--hdfd78af_4"
params.kegg_container = "quay.io/biocontainers/kofamscan:1.3.0--0"
params.orthofinder_container = "quay.io/biocontainers/orthofinder:3.1.0--hdfd78af_0"
params.diamond_container = "registry.hub.docker.com/buchfink/diamond:version2.0.13"
params.mafft_container = "quay.io/biocontainers/mafft:7.487--h779adbc_0"
params.fasttree_container = "quay.io/biocontainers/fasttree:2.1.8--h779adbc_6"
params.ncbi_amr_container = "registry.hub.docker.com/ncbi/amr:4.0.3-2024-10-22.1"
params.islandpath_container = "quay.io/biocontainers/islandpath:1.0.6--hdfd78af_0"
params.sourmash_container = "quay.io/biocontainers/sourmash:4.8.14--hdfd78af_0"
params.mcl_container = "quay.io/biocontainers/mcl:22.282--pl5321h7b50bb2_3 "

/////////////////////////////
///// EXECUTION CONTROL /////
/////////////////////////////

process.queue = 'normal'

params.executor = 'local'

// Total number of CPUs available for the run
params.n_cpus = 16
params.mem = "8G"

executor {
  $lsf {
      queueSize = 100
      pollInterval = '30sec'
  }
  $local {
      cpus = "$params.n_cpus"
      memory = "$params.mem"
  }
}

process { 
  resourceLimits = [cpus: "$params.n_cpus", memory: "$params.mem"]
  // We need this to ensure that the zdb libraries are importable from within the containers.
  withLabel: mount_basedir { 
      containerOptions = docker.enabled ? "--volume $baseDir:$baseDir" : "--bind $baseDir" 
  }
  withLabel:process_single {
      cpus   = { 1                   }
      memory = { 1.GB * task.attempt }
  }
  withLabel:process_low {
      cpus   = { 2     * task.attempt }
      memory = { 2.GB * task.attempt }
  }
  withLabel:process_medium {
      cpus   = { 4     * task.attempt }
      memory = { 4.GB * task.attempt }
  }
  withLabel:process_high {
      cpus   = { 20    * task.attempt }
      memory = { 8.GB * task.attempt }
  }
}

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.results_dir}/pipeline_info/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.results_dir}/pipeline_info/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.results_dir}/pipeline_info/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.results_dir}/pipeline_info/pipeline_dag_${trace_timestamp}.html"
}

env {
  // necessary to be able to export the python code out
  // of the main nextflow file
  // for debugging purpose, add the metagenlab_libs path
  PYTHONPATH = "$baseDir/bin:$baseDir:$baseDir/webapp"

}
