
////////////////////
///// INPUT ////////
////////////////////

// is there any local assemblies in fna that need to be processed
params.prokka = true
params.fna_dir = "fna/"

params.local_sample_sheet = false
params.ncbi_sample_sheet = "ncbi_assemblies.tsv"

// all databases used by the different scripts should be located in this directory
params.databases_dir = "/data/databases"



//////////////////////////////
///// PROTEIN ANNOTATION /////
//////////////////////////////

params.cog = true
params.interproscan = true
params.uniparc = true
params.string = true
params.pdb = true
params.oma = false
params.ko = true
params.tcdb_gblast = true
params.PRIAM = true
params.psortb = true
params.uniprot_goa = true
params.uniprot_idmapping = true
params.get_refseq_locus_corresp = true
params.macsyfinder = false
params.effector_prediction = true
params.effector_prediction_deep = false
params.paperblast = true 

// retrieve uniprot annotations & scores 
params.uniprot_data = true


//////////////////////////////
///// QUALITY CHECK //////////
//////////////////////////////

params.checkm = true



//////////////////////////////
///// Orthology //////////////
//////////////////////////////

params.orthofinder = true
params.orthofinder_output_dir = "output"

// allow (or not) missing data when identifying single copy core genes
params.core_missing = 0
params.core_genome_phylogeny_with_fasttree = true

// build orthogroup phylogeny
params.orthogroups_phylogeny_with_fasttree = true



////////////////////////////////////////////
///// HOMOLOGY SEARCH & PHYLOGENIES ////////
////////////////////////////////////////////

// homology search vs RefSeq and SwissProt
params.blast_swissprot = false
params.diamond_uniref = true
params.diamond_uniref_taxonomy = true

// build phylogenies including closest BBH
// possibility to filter BBH based on phylum name
params.uniref_diamond_BBH_phylogeny = true
params.uniref_diamond_BBH_phylogeny_top_n_hits = 4
params.uniref_diamond_BBH_phylogeny_phylum_filter = '["Chlamydiae", "Verrucomicrobia", "Planctomycetes", "Kiritimatiellaeota", "Lentisphaerae"]'



//////////////////////////////
///// CONTAINERS CONFIG //////
//////////////////////////////

// Necessary to be able to access the database directory
// in singularity

singularity.runOptions = "--bind /data:/data"
singularity.enabled = true
singularity.cacheDir = "$baseDir/singularity"

// The different containers important for the pipeline
// The container can now be updated by just editing the line here
// instead of having to do it for every process using the container

// interpro, python, prokka
params.annotation_container = "metagenlab/annotation-pipeline:1.2.1"
params.prokka = "quay.io/biocontainers/prokka:1.14.6--pl5321hdfd78af_4"
params.biopython_container = "metagenlab/biopython:1.79"
params.chlamdb_container = "metagenlab/chlamdb_annotation:1.1.0"
params.checkm_container = "metagenlab/checkm:1.0.20"
params.psort_container = "metagenlab/psort:3.0.6"
params.macsyfinder = "gempasteur/macsyfinder:2.0rc7"
params.interproscan_container = "metagenlab/interproscan:1.0"

// new
params.checkm_container = "quay.io/biocontainers/checkm-genome:1.1.3--py_1"
params.blast_container = "quay.io/biocontainers/blast:2.9.0--pl526h3066fca_4"
params.pfam_scan_container = "quay.io/biocontainers/pfam_scan:1.6--hdfd78af_4"
params.kegg_container = "quay.io/biocontainers/kofamscan:1.3.0--0"
params.orthofinder_container = "quay.io/biocontainers/orthofinder:2.5.2--0"
params.diamond_container = "registry.hub.docker.com/buchfink/diamond:version2.0.13"
params.mafft_container = "quay.io/biocontainers/mafft:7.487--h779adbc_0"
params.fasttree_container = "quay.io/biocontainers/fasttree:2.1.8--h779adbc_6"
params.macsyfinder_container = "gempasteur/macsyfinder:2.0rc7"

params.interproscan_home = "$params.databases_dir/interproscan/interproscan-5.55-88.0"
params.tcdb_db_path = "$params.databases_dir/TCDB"
params.stringdb_diamond = "/data/databases/string/stringdb.dmnd"

/////////////////////////////
///// EXECUTION CONTROL /////
/////////////////////////////

// default number of cpu and memory
// NOTE: setting up a high value may prevent nextflow from parallelizing tasks.
process.memory = '2G'
process.cpus = 1
params.executor = 'local'

executor {
  $lsf {
      queueSize = 100
      pollInterval = '30sec'
  }
  $local {
      cpus = 40
      memory = '120 GB'
  }
}


conda.cacheDir = "$HOME/miniconda3/nextflow"

env {
  // necessary to be able to export the python code out
  // of the main nextflow file
  PYTHONPATH = "$baseDir/bin"
}
